---
import About from "@/components/icons/About.astro";
import Skill from "@/components/icons/Skill.astro";
import Briefcase from "@/components/icons/Briefcase.astro";
import FileCode from "@/components/icons/Filecode.astro";
import School from "@/components/icons/School.astro";
import Logo from "@/components/icons/Logo.astro";
import { nav } from "@/consts/navigation";

const Icons: Record<string, any> = {
  About,
  Briefcase,
  FileCode,
  School,
  Logo,
  Skill,
};

const navItems = nav;
---

<aside
  class="w-28 border-r border-on_surface_variant flex-col justify-between lg:fixed lg:left-0 h-screen hidden lg:flex"
  data-nav={JSON.stringify(navItems)}
>
  <nav class="flex flex-col mt-6 gap-y-8">
    {
      navItems.map((item) => {
        const Icon = Icons[item.icon];
        return (
          <a
            href={item.url}
            class="flex flex-col items-center"
            aria-label={item.label}
          >
            <Icon class="w-6 h-6" />
            <span class="text-[.7rem] mt-3">{item.title}</span>
          </a>
        );
      })
    }
  </nav>

  <section class="flex flex-col gap-y-6 items-center justify-center">
    <a href="#" class="img-container flex flex-col w-7" target="_blank">
      <img
        src="/img/effects/background.webp"
        alt="instagram"
        class="w-full h-full"
      />
    </a>

    <div class="separate w-px h-14"></div>
  </section>
</aside>

<script>
  const sections = document.querySelectorAll(
    ".section"
  ) as NodeListOf<HTMLElement>;
  const navLinks = document.querySelectorAll(
    "aside nav a"
  ) as NodeListOf<HTMLLinkElement>;
  const aside = document.querySelector("aside") as HTMLElement;

  const currentUrl = window.location.href;
  navLinks.forEach((link) => {
    if (link.href === currentUrl) {
      link.classList.add("active");
    }
  });

  if (window.location.hash === "") {
    navLinks[0].classList.add("active");
  }

  window.onscroll = () => {
    sections.forEach((section) => {
      const top = window.scrollY;
      const offset = section.offsetTop - 200;
      const height = section.offsetHeight;
      const id = section.getAttribute("id");

      if (top >= offset && top < offset + height) {
        navLinks.forEach((link) => {
          link.classList.remove("active");
          if (link.href.includes(id!)) {
            link.classList.add("active");
          }
        });
      }
    });
  };
</script>

<style>
  .active {
    position: relative;
    color: theme(colors.primary.50);
    font-weight: 700;
    text-wrap: pretty;
    transition: All 0.3s ease;
  }

  .active::before {
    content: "";
    position: absolute;
    top: -7px;
    z-index: -1;
    width: 70px;
    height: 38px;
    border-radius: 20px;
    background-color: theme(colors.tertiary.500);
    transition: All 0.3s ease;
  }

  nav a {
    position: relative;
  }

  nav a:hover::before {
    content: "";
    position: absolute;
    top: -7px;
    z-index: -1;
    width: 70px;
    height: 38px;
    border-radius: 20px;
    background-color: theme(colors.tertiary.500);
    opacity: 0.6;
    transition: All 0.3s ease;
  }

  nav .active:hover::before{
    opacity: 1;
  }

</style>
